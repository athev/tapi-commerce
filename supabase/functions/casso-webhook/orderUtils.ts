
// H√†m extract order ID t·ª´ description - c·∫£i thi·ªán ƒë·ªÉ x·ª≠ l√Ω ch√≠nh x√°c theo format DH + hex
export function extractOrderId(description: string): string | null {
  console.log('üîç Extracting order ID from description:', description)
  
  if (!description || typeof description !== 'string') {
    console.log('‚ùå Invalid description provided')
    return null
  }
  
  // Clean description - lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
  const cleanDesc = description.trim()
  console.log('üîß Cleaned description:', cleanDesc)
  
  // C√°c pattern ƒë·ªÉ t√¨m order ID theo th·ª© t·ª± ∆∞u ti√™n
  const patterns = [
    // Pattern ch√≠nh: DH + 32 k√Ω t·ª± hex (kh√¥ng c√≥ d·∫•u g·∫°ch ngang)
    /DH([A-F0-9]{32})/i,
    // Pattern v·ªõi kho·∫£ng tr·∫Øng: DH + space + 32 k√Ω t·ª± hex  
    /DH\s+([A-F0-9]{32})/i,
    // Pattern v·ªõi #: DH# + 32 k√Ω t·ª± hex
    /DH#([A-F0-9]{32})/i,
    // Pattern v·ªõi # v√† space: DH# + space + 32 k√Ω t·ª± hex
    /DH#\s+([A-F0-9]{32})/i,
    // Pattern UUID ƒë·∫ßy ƒë·ªß v·ªõi d·∫•u g·∫°ch ngang
    /DH([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/i,
    /DH\s+([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/i,
    // Pattern ch·ªâ c√≥ hex string 32 k√Ω t·ª±
    /([A-F0-9]{32})/i,
    // Pattern ch·ªâ c√≥ UUID ƒë·∫ßy ƒë·ªß
    /([a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12})/i
  ]
  
  for (let i = 0; i < patterns.length; i++) {
    const pattern = patterns[i]
    const match = cleanDesc.match(pattern)
    if (match) {
      let extractedId = match[1].toLowerCase()
      console.log(`‚úÖ Pattern ${i + 1} matched, raw extracted ID:`, extractedId)
      
      // Normalize v·ªÅ UUID chu·∫©n n·∫øu l√† 32 k√Ω t·ª± hex
      if (extractedId.length === 32) {
        extractedId = normalizeOrderId(extractedId)
      }
      
      console.log('‚úÖ Successfully extracted and normalized order ID:', extractedId)
      return extractedId
    }
  }
  
  console.log('‚ùå No order ID pattern found in description')
  return null
}

// H√†m normalize order ID t·ª´ 32 k√Ω t·ª± hex th√†nh UUID chu·∫©n
export function normalizeOrderId(hexId: string): string {
  console.log('üîß Normalizing hex ID to UUID:', hexId)
  
  if (!hexId || typeof hexId !== 'string') {
    console.log('‚ùå Invalid hex ID provided for normalization')
    return hexId
  }
  
  // Lo·∫°i b·ªè d·∫•u g·∫°ch ngang n·∫øu c√≥
  const cleanHex = hexId.replace(/-/g, '').toLowerCase()
  
  // N·∫øu kh√¥ng ph·∫£i 32 k√Ω t·ª±, tr·∫£ v·ªÅ nguy√™n
  if (cleanHex.length !== 32) {
    console.log('‚ö†Ô∏è Hex ID length not 32 chars, returning as-is:', hexId)
    return hexId
  }
  
  // Chuy·ªÉn ƒë·ªïi 32 k√Ω t·ª± th√†nh UUID chu·∫©n
  const normalized = [
    cleanHex.slice(0, 8),
    cleanHex.slice(8, 12),
    cleanHex.slice(12, 16),
    cleanHex.slice(16, 20),
    cleanHex.slice(20, 32)
  ].join('-')
  
  console.log('‚úÖ Normalized hex ID to UUID:', normalized)
  return normalized
}

// H√†m t·∫°o c√°c pattern t√¨m ki·∫øm cho order ID
export function generateSearchPatterns(orderId: string): string[] {
  console.log('üîç Generating search patterns for order ID:', orderId)
  
  // L·∫•y hex version (b·ªè d·∫•u g·∫°ch ngang)
  const hexVersion = orderId.replace(/-/g, '').toUpperCase()
  
  const patterns = [
    // Exact UUID match
    orderId,
    // Hex version patterns
    `DH${hexVersion}`,
    `DH ${hexVersion}`,
    `DH#${hexVersion}`,
    `DH# ${hexVersion}`,
    // Just hex string
    hexVersion,
    // Mixed case patterns
    `dh${hexVersion.toLowerCase()}`,
    `DH${hexVersion.toLowerCase()}`,
  ]
  
  console.log('‚úÖ Generated search patterns:', patterns)
  return patterns
}
