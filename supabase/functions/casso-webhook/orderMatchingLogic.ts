
// IMPROVED: H√†m ki·ªÉm tra match linh ho·∫°t - c·∫£i thi·ªán ƒë·ªÉ x·ª≠ l√Ω prefix matching v√† LIKE pattern
export function isOrderMatch(orderId: string, extractedId: string): boolean {
  console.log('üîç Checking order match:', { orderId, extractedId })
  
  // Chu·∫©n h√≥a order ID (b·ªè d·∫•u g·∫°ch ngang, chuy·ªÉn th∆∞·ªùng)
  const orderHex = orderId.replace(/-/g, '').toLowerCase()
  const extracted = extractedId.toLowerCase().replace(/-/g, '')
  
  console.log('üîç Normalized comparison:', { orderHex, extracted })
  
  // Exact match with UUID
  if (orderId === extractedId) {
    console.log('‚úÖ Exact UUID match')
    return true
  }
  
  // Match v·ªõi hex ƒë·∫ßy ƒë·ªß
  if (orderHex === extracted) {
    console.log('‚úÖ Full hex match')
    return true
  }
  
  // CRITICAL FIX: Match v·ªõi prefix (t·ª´ 8 k√Ω t·ª± tr·ªü l√™n)
  if (extracted.length >= 8 && orderHex.startsWith(extracted)) {
    console.log('‚úÖ Prefix hex match', { orderPrefix: orderHex.slice(0, extracted.length), extracted })
    return true
  }
  
  // ADDITIONAL: Reverse check - extracted c√≥ th·ªÉ l√† UUID ƒë·∫ßy ƒë·ªß m√† order ID l√† prefix
  if (extracted.length >= 32 && extracted.startsWith(orderHex.slice(0, 12))) {
    console.log('‚úÖ Reverse prefix match')
    return true
  }
  
  // NEW: LIKE pattern matching - ki·ªÉm tra xem extractedId c√≥ ch·ª©a trong orderId kh√¥ng
  if (orderHex.includes(extracted) || extracted.includes(orderHex.slice(0, 8))) {
    console.log('‚úÖ LIKE pattern match')
    return true
  }
  
  console.log('‚ùå No match found')
  return false
}
