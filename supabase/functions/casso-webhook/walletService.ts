
export async function processSellerEarning(order: any, transactionAmount: number, supabase: any) {
  try {
    console.log(`üí∞ Processing seller earning for order: ${order.id}`);
    
    const sellerId = order.products?.seller_id;
    if (!sellerId) {
      console.error('‚ùå No seller ID found for order');
      return;
    }

    // T√≠nh PI amount (1 PI = 1000 VND)
    const piAmount = Math.floor(transactionAmount / 1000);
    console.log(`üìä PI Amount calculated: ${piAmount} PI (${transactionAmount} VND)`);

    // B∆Ø·ªöC 1: Ki·ªÉm tra xem ƒë√£ c√≥ wallet log cho order n√†y ch∆∞a (tr√°nh tr√πng l·∫∑p)
    const { data: existingLog, error: logCheckError } = await supabase
      .from('wallet_logs')
      .select('*')
      .eq('order_id', order.id)
      .eq('type', 'earning')
      .maybeSingle();

    if (logCheckError) {
      console.error('‚ùå Error checking existing wallet log:', logCheckError);
      return;
    }

    if (existingLog) {
      console.log('‚úÖ Wallet log already exists for this order, skipping duplicate processing');
      return;
    }

    // B∆Ø·ªöC 2: L·∫•y ho·∫∑c t·∫°o v√≠ cho seller
    let { data: wallet, error: walletError } = await supabase
      .from('wallets')
      .select('*')
      .eq('user_id', sellerId)
      .maybeSingle();

    if (walletError) {
      console.error('‚ùå Error fetching wallet:', walletError);
      return;
    }

    if (!wallet) {
      console.log('üÜï Creating new wallet for seller');
      const { data: newWallet, error: createError } = await supabase
        .from('wallets')
        .insert({
          user_id: sellerId,
          pending: piAmount,
          available: 0,
          total_earned: piAmount
        })
        .select()
        .single();

      if (createError) {
        console.error('‚ùå Error creating wallet:', createError);
        return;
      }

      console.log('‚úÖ New wallet created with initial PI:', newWallet.id);
      wallet = newWallet;
    } else {
      console.log('üìà Updating existing wallet with PI');
      
      // B∆Ø·ªöC 3: C·∫≠p nh·∫≠t v√≠ hi·ªán t·∫°i - c·ªông PI v√†o pending v√† total_earned
      const newPending = Number(wallet.pending) + piAmount;
      const newTotalEarned = Number(wallet.total_earned) + piAmount;
      
      console.log(`üíµ Wallet update: pending ${wallet.pending} ‚Üí ${newPending}, total_earned ${wallet.total_earned} ‚Üí ${newTotalEarned}`);
      
      const { data: updatedWallet, error: updateError } = await supabase
        .from('wallets')
        .update({
          pending: newPending,
          total_earned: newTotalEarned,
          updated_at: new Date().toISOString()
        })
        .eq('id', wallet.id)
        .select()
        .single();

      if (updateError) {
        console.error('‚ùå Error updating wallet:', updateError);
        return;
      }

      console.log('‚úÖ Wallet updated successfully with PI added to pending');
      wallet = updatedWallet;
    }

    // B∆Ø·ªöC 4: T·∫°o wallet log ƒë·ªÉ tracking
    await createWalletLog(supabase, wallet.id, order.id, piAmount, transactionAmount);

    console.log(`üéâ Successfully added ${piAmount} PI to seller's wallet for order ${order.id}`);
    console.log(`üìä Final wallet state - pending: ${wallet.pending}, available: ${wallet.available}, total_earned: ${wallet.total_earned}`);

  } catch (error) {
    console.error('‚ùå Error in processSellerEarning:', error);
    throw error; // Re-throw ƒë·ªÉ c√≥ th·ªÉ catch ·ªü level cao h∆°n
  }
}

async function createWalletLog(supabase: any, walletId: string, orderId: string, piAmount: number, vndAmount: number) {
  try {
    // T√≠nh release date (3 ng√†y sau)
    const releaseDate = new Date();
    releaseDate.setDate(releaseDate.getDate() + 3);

    console.log(`üìù Creating wallet log for ${piAmount} PI, release date: ${releaseDate.toISOString()}`);

    const { data: logResult, error } = await supabase
      .from('wallet_logs')
      .insert({
        wallet_id: walletId,
        order_id: orderId,
        type: 'earning',
        pi_amount: piAmount,
        vnd_amount: vndAmount,
        status: 'pending',
        description: `Earnings from order ${orderId.slice(0, 8)}`,
        release_date: releaseDate.toISOString()
      })
      .select()
      .single();

    if (error) {
      console.error('‚ùå Error creating wallet log:', error);
      throw error;
    } else {
      console.log(`‚úÖ Wallet log created successfully - ID: ${logResult.id}`);
      console.log(`üìù Log details: ${piAmount} PI from order ${orderId}, release on ${releaseDate.toISOString()}`);
    }
  } catch (error) {
    console.error('‚ùå Error in createWalletLog:', error);
    throw error;
  }
}
